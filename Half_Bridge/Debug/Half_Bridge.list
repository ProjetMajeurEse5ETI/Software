
Half_Bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f64  08002f64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f64  08002f64  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f64  08002f64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f68  08002f68  00012f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a00a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001823  00000000  00000000  0002a046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002b870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000908  00000000  00000000  0002c250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cd3a  00000000  00000000  0002cb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000be5b  00000000  00000000  00049892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae9ba  00000000  00000000  000556ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001040a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002804  00000000  00000000  001040fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f1c 	.word	0x08002f1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002f1c 	.word	0x08002f1c

080001c8 <resetOutput>:

#include "Seq_Half_Bridge.h"

void resetOutput(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2108      	movs	r1, #8
 80001d0:	480a      	ldr	r0, [pc, #40]	; (80001fc <resetOutput+0x34>)
 80001d2:	f000 fe4d 	bl	8000e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	2110      	movs	r1, #16
 80001da:	4808      	ldr	r0, [pc, #32]	; (80001fc <resetOutput+0x34>)
 80001dc:	f000 fe48 	bl	8000e70 <HAL_GPIO_WritePin>
	TIM2 -> CCR1 = 0;
 80001e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001e4:	2200      	movs	r2, #0
 80001e6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2 -> CCR2 = 0;
 80001e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ec:	2200      	movs	r2, #0
 80001ee:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2 -> CCR3 = 0;
 80001f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001f4:	2200      	movs	r2, #0
 80001f6:	63da      	str	r2, [r3, #60]	; 0x3c
	/*HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);*/
}
 80001f8:	bf00      	nop
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	48000c00 	.word	0x48000c00

08000200 <verityTable>:

void verityTable(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
	int HallSensor = GPIOD->IDR & 0x0007;
 8000206:	4b2f      	ldr	r3, [pc, #188]	; (80002c4 <verityTable+0xc4>)
 8000208:	691b      	ldr	r3, [r3, #16]
 800020a:	f003 0307 	and.w	r3, r3, #7
 800020e:	607b      	str	r3, [r7, #4]
	resetOutput();
 8000210:	f7ff ffda 	bl	80001c8 <resetOutput>
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	3b01      	subs	r3, #1
 8000218:	2b05      	cmp	r3, #5
 800021a:	d84b      	bhi.n	80002b4 <verityTable+0xb4>
 800021c:	a201      	add	r2, pc, #4	; (adr r2, 8000224 <verityTable+0x24>)
 800021e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000222:	bf00      	nop
 8000224:	08000251 	.word	0x08000251
 8000228:	08000279 	.word	0x08000279
 800022c:	08000265 	.word	0x08000265
 8000230:	080002a1 	.word	0x080002a1
 8000234:	0800023d 	.word	0x0800023d
 8000238:	0800028d 	.word	0x0800028d
	switch (HallSensor){
	// Phase 1
	case 5 :
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800023c:	2201      	movs	r2, #1
 800023e:	2110      	movs	r1, #16
 8000240:	4820      	ldr	r0, [pc, #128]	; (80002c4 <verityTable+0xc4>)
 8000242:	f000 fe15 	bl	8000e70 <HAL_GPIO_WritePin>
		TIM2 -> CCR1 = 24;
 8000246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800024a:	2218      	movs	r2, #24
 800024c:	635a      	str	r2, [r3, #52]	; 0x34
		//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

		break;
 800024e:	e034      	b.n	80002ba <verityTable+0xba>
	// Phase 2
	case 1 :
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	2120      	movs	r1, #32
 8000254:	481b      	ldr	r0, [pc, #108]	; (80002c4 <verityTable+0xc4>)
 8000256:	f000 fe0b 	bl	8000e70 <HAL_GPIO_WritePin>
		TIM2 -> CCR1 = 24;
 800025a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800025e:	2218      	movs	r2, #24
 8000260:	635a      	str	r2, [r3, #52]	; 0x34
		//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

		break;
 8000262:	e02a      	b.n	80002ba <verityTable+0xba>
	// Phase 3
	case 3 :
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8000264:	2201      	movs	r2, #1
 8000266:	2120      	movs	r1, #32
 8000268:	4816      	ldr	r0, [pc, #88]	; (80002c4 <verityTable+0xc4>)
 800026a:	f000 fe01 	bl	8000e70 <HAL_GPIO_WritePin>
		TIM2 -> CCR2 = 24;
 800026e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000272:	2218      	movs	r2, #24
 8000274:	639a      	str	r2, [r3, #56]	; 0x38
		//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);

		break;
 8000276:	e020      	b.n	80002ba <verityTable+0xba>
	// Phase 4
		case 2 :
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	2108      	movs	r1, #8
 800027c:	4811      	ldr	r0, [pc, #68]	; (80002c4 <verityTable+0xc4>)
 800027e:	f000 fdf7 	bl	8000e70 <HAL_GPIO_WritePin>
			TIM2 -> CCR2 = 24;
 8000282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000286:	2218      	movs	r2, #24
 8000288:	639a      	str	r2, [r3, #56]	; 0x38
			//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);

			break;
 800028a:	e016      	b.n	80002ba <verityTable+0xba>
	// Phase 5
		case 6 :
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2108      	movs	r1, #8
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <verityTable+0xc4>)
 8000292:	f000 fded 	bl	8000e70 <HAL_GPIO_WritePin>
			TIM2 -> CCR3 = 24;
 8000296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800029a:	2218      	movs	r2, #24
 800029c:	63da      	str	r2, [r3, #60]	; 0x3c
			//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);

			break;
 800029e:	e00c      	b.n	80002ba <verityTable+0xba>
	// Phase 6
		case 4 :
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2110      	movs	r1, #16
 80002a4:	4807      	ldr	r0, [pc, #28]	; (80002c4 <verityTable+0xc4>)
 80002a6:	f000 fde3 	bl	8000e70 <HAL_GPIO_WritePin>
			TIM2 -> CCR3 = 24;
 80002aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ae:	2218      	movs	r2, #24
 80002b0:	63da      	str	r2, [r3, #60]	; 0x3c
			//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
			break;
 80002b2:	e002      	b.n	80002ba <verityTable+0xba>
	// Default
		default :
			resetOutput();
 80002b4:	f7ff ff88 	bl	80001c8 <resetOutput>
			break;
 80002b8:	bf00      	nop
	}

}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	48000c00 	.word	0x48000c00

080002c8 <MX_GPIO_Init>:
     PA12   ------> USB_DP
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08c      	sub	sp, #48	; 0x30
 80002cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ce:	f107 031c 	add.w	r3, r7, #28
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002de:	4b79      	ldr	r3, [pc, #484]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a78      	ldr	r2, [pc, #480]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 80002e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b76      	ldr	r3, [pc, #472]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002f2:	61bb      	str	r3, [r7, #24]
 80002f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f6:	4b73      	ldr	r3, [pc, #460]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a72      	ldr	r2, [pc, #456]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 80002fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	4b70      	ldr	r3, [pc, #448]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800030a:	617b      	str	r3, [r7, #20]
 800030c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800030e:	4b6d      	ldr	r3, [pc, #436]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a6c      	ldr	r2, [pc, #432]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 8000314:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b6a      	ldr	r3, [pc, #424]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000322:	613b      	str	r3, [r7, #16]
 8000324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000326:	4b67      	ldr	r3, [pc, #412]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a66      	ldr	r2, [pc, #408]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 800032c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b64      	ldr	r3, [pc, #400]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033e:	4b61      	ldr	r3, [pc, #388]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	4a60      	ldr	r2, [pc, #384]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 8000344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000348:	6153      	str	r3, [r2, #20]
 800034a:	4b5e      	ldr	r3, [pc, #376]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000356:	4b5b      	ldr	r3, [pc, #364]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a5a      	ldr	r2, [pc, #360]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 800035c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	4b58      	ldr	r3, [pc, #352]	; (80004c4 <MX_GPIO_Init+0x1fc>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800036e:	2200      	movs	r2, #0
 8000370:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000374:	4854      	ldr	r0, [pc, #336]	; (80004c8 <MX_GPIO_Init+0x200>)
 8000376:	f000 fd7b 	bl	8000e70 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	2138      	movs	r1, #56	; 0x38
 800037e:	4853      	ldr	r0, [pc, #332]	; (80004cc <MX_GPIO_Init+0x204>)
 8000380:	f000 fd76 	bl	8000e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000384:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000388:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000392:	2300      	movs	r3, #0
 8000394:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000396:	f107 031c 	add.w	r3, r7, #28
 800039a:	4619      	mov	r1, r3
 800039c:	484a      	ldr	r0, [pc, #296]	; (80004c8 <MX_GPIO_Init+0x200>)
 800039e:	f000 fbed 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin;
 80003a2:	2330      	movs	r3, #48	; 0x30
 80003a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80003a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80003aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	2300      	movs	r3, #0
 80003ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003b0:	f107 031c 	add.w	r3, r7, #28
 80003b4:	4619      	mov	r1, r3
 80003b6:	4844      	ldr	r0, [pc, #272]	; (80004c8 <MX_GPIO_Init+0x200>)
 80003b8:	f000 fbe0 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003bc:	2301      	movs	r3, #1
 80003be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c0:	2300      	movs	r3, #0
 80003c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003c8:	f107 031c 	add.w	r3, r7, #28
 80003cc:	4619      	mov	r1, r3
 80003ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d2:	f000 fbd3 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80003d6:	23e0      	movs	r3, #224	; 0xe0
 80003d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003da:	2302      	movs	r3, #2
 80003dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	2300      	movs	r3, #0
 80003e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80003e6:	2305      	movs	r3, #5
 80003e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ea:	f107 031c 	add.w	r3, r7, #28
 80003ee:	4619      	mov	r1, r3
 80003f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f4:	f000 fbc2 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80003f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80003fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003fe:	2302      	movs	r3, #2
 8000400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000406:	2303      	movs	r3, #3
 8000408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800040a:	230e      	movs	r3, #14
 800040c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040e:	f107 031c 	add.w	r3, r7, #28
 8000412:	4619      	mov	r1, r3
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f000 fbb0 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800041c:	2307      	movs	r3, #7
 800041e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000420:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000426:	2301      	movs	r3, #1
 8000428:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800042a:	f107 031c 	add.w	r3, r7, #28
 800042e:	4619      	mov	r1, r3
 8000430:	4826      	ldr	r0, [pc, #152]	; (80004cc <MX_GPIO_Init+0x204>)
 8000432:	f000 fba3 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000436:	2338      	movs	r3, #56	; 0x38
 8000438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	2301      	movs	r3, #1
 800043c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800043e:	2301      	movs	r3, #1
 8000440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	2300      	movs	r3, #0
 8000444:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000446:	f107 031c 	add.w	r3, r7, #28
 800044a:	4619      	mov	r1, r3
 800044c:	481f      	ldr	r0, [pc, #124]	; (80004cc <MX_GPIO_Init+0x204>)
 800044e:	f000 fb95 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000452:	2340      	movs	r3, #64	; 0x40
 8000454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000456:	2300      	movs	r3, #0
 8000458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800045e:	f107 031c 	add.w	r3, r7, #28
 8000462:	4619      	mov	r1, r3
 8000464:	4819      	ldr	r0, [pc, #100]	; (80004cc <MX_GPIO_Init+0x204>)
 8000466:	f000 fb89 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800046a:	23c0      	movs	r3, #192	; 0xc0
 800046c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800046e:	2312      	movs	r3, #18
 8000470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	2300      	movs	r3, #0
 8000478:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800047a:	2304      	movs	r3, #4
 800047c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047e:	f107 031c 	add.w	r3, r7, #28
 8000482:	4619      	mov	r1, r3
 8000484:	4812      	ldr	r0, [pc, #72]	; (80004d0 <MX_GPIO_Init+0x208>)
 8000486:	f000 fb79 	bl	8000b7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	2006      	movs	r0, #6
 8000490:	f000 fb3d 	bl	8000b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000494:	2006      	movs	r0, #6
 8000496:	f000 fb56 	bl	8000b46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2100      	movs	r1, #0
 800049e:	2007      	movs	r0, #7
 80004a0:	f000 fb35 	bl	8000b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80004a4:	2007      	movs	r0, #7
 80004a6:	f000 fb4e 	bl	8000b46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	2008      	movs	r0, #8
 80004b0:	f000 fb2d 	bl	8000b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80004b4:	2008      	movs	r0, #8
 80004b6:	f000 fb46 	bl	8000b46 <HAL_NVIC_EnableIRQ>

}
 80004ba:	bf00      	nop
 80004bc:	3730      	adds	r7, #48	; 0x30
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48001000 	.word	0x48001000
 80004cc:	48000c00 	.word	0x48000c00
 80004d0:	48000400 	.word	0x48000400

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 f9d8 	bl	800088c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f805 	bl	80004ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f7ff fef2 	bl	80002c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004e4:	f000 f8c8 	bl	8000678 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x14>

080004ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b090      	sub	sp, #64	; 0x40
 80004ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f0:	f107 0318 	add.w	r3, r7, #24
 80004f4:	2228      	movs	r2, #40	; 0x28
 80004f6:	2100      	movs	r1, #0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f002 fd07 	bl	8002f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800050c:	2302      	movs	r3, #2
 800050e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000510:	2301      	movs	r3, #1
 8000512:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000514:	2310      	movs	r3, #16
 8000516:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000518:	2302      	movs	r3, #2
 800051a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800051c:	2300      	movs	r3, #0
 800051e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000520:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000524:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000526:	f107 0318 	add.w	r3, r7, #24
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fcd0 	bl	8000ed0 <HAL_RCC_OscConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000536:	f000 f824 	bl	8000582 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053a:	230f      	movs	r3, #15
 800053c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	2302      	movs	r3, #2
 8000540:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2102      	movs	r1, #2
 8000554:	4618      	mov	r0, r3
 8000556:	f001 fbc3 	bl	8001ce0 <HAL_RCC_ClockConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000560:	f000 f80f 	bl	8000582 <Error_Handler>
  }
}
 8000564:	bf00      	nop
 8000566:	3740      	adds	r7, #64	; 0x40
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
int i = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
	verityTable();/*if(i == 0){
 8000576:	f7ff fe43 	bl	8000200 <verityTable>
	}
	else{
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
		i = 0;
	}*/
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000586:	b672      	cpsid	i
}
 8000588:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800058a:	e7fe      	b.n	800058a <Error_Handler+0x8>

0800058c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <HAL_MspInit+0x44>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_MspInit+0x44>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6193      	str	r3, [r2, #24]
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_MspInit+0x44>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <HAL_MspInit+0x44>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <HAL_MspInit+0x44>)
 80005b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b4:	61d3      	str	r3, [r2, #28]
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <HAL_MspInit+0x44>)
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005c2:	2007      	movs	r0, #7
 80005c4:	f000 fa98 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000

080005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <NMI_Handler+0x4>

080005da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005de:	e7fe      	b.n	80005de <HardFault_Handler+0x4>

080005e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <MemManage_Handler+0x4>

080005e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <BusFault_Handler+0x4>

080005ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <UsageFault_Handler+0x4>

080005f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000620:	f000 f97a 	bl	8000918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OSC_IN_Pin);
 800062c:	2001      	movs	r0, #1
 800062e:	f000 fc37 	bl	8000ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}

08000636 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OSC_OUT_Pin);
 800063a:	2002      	movs	r0, #2
 800063c:	f000 fc30 	bl	8000ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000648:	2004      	movs	r0, #4
 800064a:	f000 fc29 	bl	8000ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <SystemInit+0x20>)
 800065a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800065e:	4a05      	ldr	r2, [pc, #20]	; (8000674 <SystemInit+0x20>)
 8000660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08e      	sub	sp, #56	; 0x38
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000698:	463b      	mov	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]
 80006a6:	615a      	str	r2, [r3, #20]
 80006a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006aa:	4b38      	ldr	r3, [pc, #224]	; (800078c <MX_TIM2_Init+0x114>)
 80006ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80006b2:	4b36      	ldr	r3, [pc, #216]	; (800078c <MX_TIM2_Init+0x114>)
 80006b4:	223f      	movs	r2, #63	; 0x3f
 80006b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <MX_TIM2_Init+0x114>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 80006be:	4b33      	ldr	r3, [pc, #204]	; (800078c <MX_TIM2_Init+0x114>)
 80006c0:	2231      	movs	r2, #49	; 0x31
 80006c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c4:	4b31      	ldr	r3, [pc, #196]	; (800078c <MX_TIM2_Init+0x114>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006ca:	4b30      	ldr	r3, [pc, #192]	; (800078c <MX_TIM2_Init+0x114>)
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006d0:	482e      	ldr	r0, [pc, #184]	; (800078c <MX_TIM2_Init+0x114>)
 80006d2:	f001 fcd5 	bl	8002080 <HAL_TIM_Base_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006dc:	f7ff ff51 	bl	8000582 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ea:	4619      	mov	r1, r3
 80006ec:	4827      	ldr	r0, [pc, #156]	; (800078c <MX_TIM2_Init+0x114>)
 80006ee:	f001 fe93 	bl	8002418 <HAL_TIM_ConfigClockSource>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006f8:	f7ff ff43 	bl	8000582 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006fc:	4823      	ldr	r0, [pc, #140]	; (800078c <MX_TIM2_Init+0x114>)
 80006fe:	f001 fd16 	bl	800212e <HAL_TIM_PWM_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000708:	f7ff ff3b 	bl	8000582 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	481c      	ldr	r0, [pc, #112]	; (800078c <MX_TIM2_Init+0x114>)
 800071c:	f002 fb52 	bl	8002dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000726:	f7ff ff2c 	bl	8000582 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800072a:	2360      	movs	r3, #96	; 0x60
 800072c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_TIM2_Init+0x114>)
 8000742:	f001 fd55 	bl	80021f0 <HAL_TIM_PWM_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800074c:	f7ff ff19 	bl	8000582 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	2204      	movs	r2, #4
 8000754:	4619      	mov	r1, r3
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_TIM2_Init+0x114>)
 8000758:	f001 fd4a 	bl	80021f0 <HAL_TIM_PWM_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000762:	f7ff ff0e 	bl	8000582 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	2208      	movs	r2, #8
 800076a:	4619      	mov	r1, r3
 800076c:	4807      	ldr	r0, [pc, #28]	; (800078c <MX_TIM2_Init+0x114>)
 800076e:	f001 fd3f 	bl	80021f0 <HAL_TIM_PWM_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000778:	f7ff ff03 	bl	8000582 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <MX_TIM2_Init+0x114>)
 800077e:	f000 f825 	bl	80007cc <HAL_TIM_MspPostInit>

}
 8000782:	bf00      	nop
 8000784:	3738      	adds	r7, #56	; 0x38
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000028 	.word	0x20000028

08000790 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007a0:	d10b      	bne.n	80007ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_TIM_Base_MspInit+0x38>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_TIM_Base_MspInit+0x38>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_TIM_Base_MspInit+0x38>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007ec:	d11d      	bne.n	800082a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <HAL_TIM_MspPostInit+0x68>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	4a10      	ldr	r2, [pc, #64]	; (8000834 <HAL_TIM_MspPostInit+0x68>)
 80007f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f8:	6153      	str	r3, [r2, #20]
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <HAL_TIM_MspPostInit+0x68>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 8000806:	f248 0306 	movw	r3, #32774	; 0x8006
 800080a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000810:	2301      	movs	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000818:	2301      	movs	r3, #1
 800081a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000826:	f000 f9a9 	bl	8000b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800082a:	bf00      	nop
 800082c:	3720      	adds	r7, #32
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000870 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800083c:	f7ff ff0a 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <LoopForever+0x6>)
  ldr r1, =_edata
 8000842:	490d      	ldr	r1, [pc, #52]	; (8000878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <LoopForever+0xe>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000858:	4c0a      	ldr	r4, [pc, #40]	; (8000884 <LoopForever+0x16>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000866:	f002 fb2d 	bl	8002ec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800086a:	f7ff fe33 	bl	80004d4 <main>

0800086e <LoopForever>:

LoopForever:
    b LoopForever
 800086e:	e7fe      	b.n	800086e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000870:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800087c:	08002f6c 	.word	0x08002f6c
  ldr r2, =_sbss
 8000880:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000884:	20000078 	.word	0x20000078

08000888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC1_2_IRQHandler>
	...

0800088c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_Init+0x28>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_Init+0x28>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f92b 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f000 f808 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a8:	f7ff fe70 	bl	800058c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_InitTick+0x54>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_InitTick+0x58>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f943 	bl	8000b62 <HAL_SYSTICK_Config>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00e      	b.n	8000904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b0f      	cmp	r3, #15
 80008ea:	d80a      	bhi.n	8000902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ec:	2200      	movs	r2, #0
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	f000 f90b 	bl	8000b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f8:	4a06      	ldr	r2, [pc, #24]	; (8000914 <HAL_InitTick+0x5c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	e000      	b.n	8000904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000000 	.word	0x20000000
 8000910:	20000008 	.word	0x20000008
 8000914:	20000004 	.word	0x20000004

08000918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_IncTick+0x20>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_IncTick+0x24>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_IncTick+0x24>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000008 	.word	0x20000008
 800093c:	20000074 	.word	0x20000074

08000940 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;  
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <HAL_GetTick+0x14>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000074 	.word	0x20000074

08000958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <__NVIC_GetPriorityGrouping+0x18>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	f003 0307 	and.w	r3, r3, #7
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	db0b      	blt.n	80009e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f003 021f 	and.w	r2, r3, #31
 80009d4:	4907      	ldr	r1, [pc, #28]	; (80009f4 <__NVIC_EnableIRQ+0x38>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	095b      	lsrs	r3, r3, #5
 80009dc:	2001      	movs	r0, #1
 80009de:	fa00 f202 	lsl.w	r2, r0, r2
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000e100 	.word	0xe000e100

080009f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db0a      	blt.n	8000a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	; (8000a44 <__NVIC_SetPriority+0x4c>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a20:	e00a      	b.n	8000a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4908      	ldr	r1, [pc, #32]	; (8000a48 <__NVIC_SetPriority+0x50>)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	761a      	strb	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	; 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	bf28      	it	cs
 8000a6a:	2304      	movcs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d902      	bls.n	8000a7c <NVIC_EncodePriority+0x30>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	e000      	b.n	8000a7e <NVIC_EncodePriority+0x32>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43d9      	mvns	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	4313      	orrs	r3, r2
         );
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3724      	adds	r7, #36	; 0x24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac4:	d301      	bcc.n	8000aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00f      	b.n	8000aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <SysTick_Config+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f7ff ff8e 	bl	80009f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <SysTick_Config+0x40>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <SysTick_Config+0x40>)
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff29 	bl	8000958 <__NVIC_SetPriorityGrouping>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b20:	f7ff ff3e 	bl	80009a0 <__NVIC_GetPriorityGrouping>
 8000b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff ff8e 	bl	8000a4c <NVIC_EncodePriority>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff5d 	bl	80009f8 <__NVIC_SetPriority>
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff31 	bl	80009bc <__NVIC_EnableIRQ>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ffa2 	bl	8000ab4 <SysTick_Config>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8a:	e154      	b.n	8000e36 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	2101      	movs	r1, #1
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	fa01 f303 	lsl.w	r3, r1, r3
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 8146 	beq.w	8000e30 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d005      	beq.n	8000bbc <HAL_GPIO_Init+0x40>
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d130      	bne.n	8000c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	f003 0201 	and.w	r2, r3, #1
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d017      	beq.n	8000c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2203      	movs	r2, #3
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d123      	bne.n	8000cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	08da      	lsrs	r2, r3, #3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3208      	adds	r2, #8
 8000c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	08da      	lsrs	r2, r3, #3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3208      	adds	r2, #8
 8000ca8:	6939      	ldr	r1, [r7, #16]
 8000caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0203 	and.w	r2, r3, #3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 80a0 	beq.w	8000e30 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf0:	4b58      	ldr	r3, [pc, #352]	; (8000e54 <HAL_GPIO_Init+0x2d8>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a57      	ldr	r2, [pc, #348]	; (8000e54 <HAL_GPIO_Init+0x2d8>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b55      	ldr	r3, [pc, #340]	; (8000e54 <HAL_GPIO_Init+0x2d8>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d08:	4a53      	ldr	r2, [pc, #332]	; (8000e58 <HAL_GPIO_Init+0x2dc>)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d32:	d019      	beq.n	8000d68 <HAL_GPIO_Init+0x1ec>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a49      	ldr	r2, [pc, #292]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d013      	beq.n	8000d64 <HAL_GPIO_Init+0x1e8>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a48      	ldr	r2, [pc, #288]	; (8000e60 <HAL_GPIO_Init+0x2e4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d00d      	beq.n	8000d60 <HAL_GPIO_Init+0x1e4>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a47      	ldr	r2, [pc, #284]	; (8000e64 <HAL_GPIO_Init+0x2e8>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d007      	beq.n	8000d5c <HAL_GPIO_Init+0x1e0>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a46      	ldr	r2, [pc, #280]	; (8000e68 <HAL_GPIO_Init+0x2ec>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d101      	bne.n	8000d58 <HAL_GPIO_Init+0x1dc>
 8000d54:	2304      	movs	r3, #4
 8000d56:	e008      	b.n	8000d6a <HAL_GPIO_Init+0x1ee>
 8000d58:	2305      	movs	r3, #5
 8000d5a:	e006      	b.n	8000d6a <HAL_GPIO_Init+0x1ee>
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e004      	b.n	8000d6a <HAL_GPIO_Init+0x1ee>
 8000d60:	2302      	movs	r3, #2
 8000d62:	e002      	b.n	8000d6a <HAL_GPIO_Init+0x1ee>
 8000d64:	2301      	movs	r3, #1
 8000d66:	e000      	b.n	8000d6a <HAL_GPIO_Init+0x1ee>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	f002 0203 	and.w	r2, r2, #3
 8000d70:	0092      	lsls	r2, r2, #2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d7a:	4937      	ldr	r1, [pc, #220]	; (8000e58 <HAL_GPIO_Init+0x2dc>)
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	089b      	lsrs	r3, r3, #2
 8000d80:	3302      	adds	r3, #2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d88:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <HAL_GPIO_Init+0x2f0>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dac:	4a2f      	ldr	r2, [pc, #188]	; (8000e6c <HAL_GPIO_Init+0x2f0>)
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <HAL_GPIO_Init+0x2f0>)
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dd6:	4a25      	ldr	r2, [pc, #148]	; (8000e6c <HAL_GPIO_Init+0x2f0>)
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <HAL_GPIO_Init+0x2f0>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e00:	4a1a      	ldr	r2, [pc, #104]	; (8000e6c <HAL_GPIO_Init+0x2f0>)
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_GPIO_Init+0x2f0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <HAL_GPIO_Init+0x2f0>)
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3301      	adds	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f47f aea3 	bne.w	8000b8c <HAL_GPIO_Init+0x10>
  }
}
 8000e46:	bf00      	nop
 8000e48:	bf00      	nop
 8000e4a:	371c      	adds	r7, #28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010000 	.word	0x40010000
 8000e5c:	48000400 	.word	0x48000400
 8000e60:	48000800 	.word	0x48000800
 8000e64:	48000c00 	.word	0x48000c00
 8000e68:	48001000 	.word	0x48001000
 8000e6c:	40010400 	.word	0x40010400

08000e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e80:	787b      	ldrb	r3, [r7, #1]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e8c:	e002      	b.n	8000e94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e8e:	887a      	ldrh	r2, [r7, #2]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000eac:	695a      	ldr	r2, [r3, #20]
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d006      	beq.n	8000ec4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fb54 	bl	800056c <HAL_GPIO_EXTI_Callback>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f000 bef4 	b.w	8001cd2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 816a 	beq.w	80011ce <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000efa:	4bb3      	ldr	r3, [pc, #716]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 030c 	and.w	r3, r3, #12
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	d00c      	beq.n	8000f20 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f06:	4bb0      	ldr	r3, [pc, #704]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 030c 	and.w	r3, r3, #12
 8000f0e:	2b08      	cmp	r3, #8
 8000f10:	d159      	bne.n	8000fc6 <HAL_RCC_OscConfig+0xf6>
 8000f12:	4bad      	ldr	r3, [pc, #692]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1e:	d152      	bne.n	8000fc6 <HAL_RCC_OscConfig+0xf6>
 8000f20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f24:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f28:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f2c:	fa93 f3a3 	rbit	r3, r3
 8000f30:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f34:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f38:	fab3 f383 	clz	r3, r3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d102      	bne.n	8000f52 <HAL_RCC_OscConfig+0x82>
 8000f4c:	4b9e      	ldr	r3, [pc, #632]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	e015      	b.n	8000f7e <HAL_RCC_OscConfig+0xae>
 8000f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f56:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f5e:	fa93 f3a3 	rbit	r3, r3
 8000f62:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f6a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f6e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f72:	fa93 f3a3 	rbit	r3, r3
 8000f76:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f7a:	4b93      	ldr	r3, [pc, #588]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f82:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f86:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f8a:	fa92 f2a2 	rbit	r2, r2
 8000f8e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f92:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f96:	fab2 f282 	clz	r2, r2
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	f042 0220 	orr.w	r2, r2, #32
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	f002 021f 	and.w	r2, r2, #31
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fac:	4013      	ands	r3, r2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 810c 	beq.w	80011cc <HAL_RCC_OscConfig+0x2fc>
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f040 8106 	bne.w	80011cc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	f000 be86 	b.w	8001cd2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd0:	d106      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x110>
 8000fd2:	4b7d      	ldr	r3, [pc, #500]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a7c      	ldr	r2, [pc, #496]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8000fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e030      	b.n	8001042 <HAL_RCC_OscConfig+0x172>
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10c      	bne.n	8001004 <HAL_RCC_OscConfig+0x134>
 8000fea:	4b77      	ldr	r3, [pc, #476]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a76      	ldr	r2, [pc, #472]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8000ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b74      	ldr	r3, [pc, #464]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a73      	ldr	r2, [pc, #460]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8000ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e01e      	b.n	8001042 <HAL_RCC_OscConfig+0x172>
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800100e:	d10c      	bne.n	800102a <HAL_RCC_OscConfig+0x15a>
 8001010:	4b6d      	ldr	r3, [pc, #436]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a6c      	ldr	r2, [pc, #432]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8001016:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b6a      	ldr	r3, [pc, #424]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a69      	ldr	r2, [pc, #420]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8001022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	e00b      	b.n	8001042 <HAL_RCC_OscConfig+0x172>
 800102a:	4b67      	ldr	r3, [pc, #412]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a66      	ldr	r2, [pc, #408]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8001030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	4b64      	ldr	r3, [pc, #400]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a63      	ldr	r2, [pc, #396]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 800103c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001040:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001042:	4b61      	ldr	r3, [pc, #388]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8001044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001046:	f023 020f 	bic.w	r2, r3, #15
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	495d      	ldr	r1, [pc, #372]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8001052:	4313      	orrs	r3, r2
 8001054:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d059      	beq.n	8001114 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001060:	f7ff fc6e 	bl	8000940 <HAL_GetTick>
 8001064:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001068:	e00a      	b.n	8001080 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800106a:	f7ff fc69 	bl	8000940 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b64      	cmp	r3, #100	; 0x64
 8001078:	d902      	bls.n	8001080 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	f000 be29 	b.w	8001cd2 <HAL_RCC_OscConfig+0xe02>
 8001080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001084:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001088:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800108c:	fa93 f3a3 	rbit	r3, r3
 8001090:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001094:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001098:	fab3 f383 	clz	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d102      	bne.n	80010b2 <HAL_RCC_OscConfig+0x1e2>
 80010ac:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	e015      	b.n	80010de <HAL_RCC_OscConfig+0x20e>
 80010b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010be:	fa93 f3a3 	rbit	r3, r3
 80010c2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010ce:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010d2:	fa93 f3a3 	rbit	r3, r3
 80010d6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010da:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010e2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010e6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010ea:	fa92 f2a2 	rbit	r2, r2
 80010ee:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80010f2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80010f6:	fab2 f282 	clz	r2, r2
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	f042 0220 	orr.w	r2, r2, #32
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	f002 021f 	and.w	r2, r2, #31
 8001106:	2101      	movs	r1, #1
 8001108:	fa01 f202 	lsl.w	r2, r1, r2
 800110c:	4013      	ands	r3, r2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0ab      	beq.n	800106a <HAL_RCC_OscConfig+0x19a>
 8001112:	e05c      	b.n	80011ce <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fc14 	bl	8000940 <HAL_GetTick>
 8001118:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111c:	e00a      	b.n	8001134 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111e:	f7ff fc0f 	bl	8000940 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d902      	bls.n	8001134 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	f000 bdcf 	b.w	8001cd2 <HAL_RCC_OscConfig+0xe02>
 8001134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001138:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001148:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114c:	fab3 f383 	clz	r3, r3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	b2db      	uxtb	r3, r3
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b01      	cmp	r3, #1
 800115e:	d102      	bne.n	8001166 <HAL_RCC_OscConfig+0x296>
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	e015      	b.n	8001192 <HAL_RCC_OscConfig+0x2c2>
 8001166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800117a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800117e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001182:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_RCC_OscConfig+0x2f8>)
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001196:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800119a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800119e:	fa92 f2a2 	rbit	r2, r2
 80011a2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80011a6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80011aa:	fab2 f282 	clz	r2, r2
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	f042 0220 	orr.w	r2, r2, #32
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	f002 021f 	and.w	r2, r2, #31
 80011ba:	2101      	movs	r1, #1
 80011bc:	fa01 f202 	lsl.w	r2, r1, r2
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1ab      	bne.n	800111e <HAL_RCC_OscConfig+0x24e>
 80011c6:	e002      	b.n	80011ce <HAL_RCC_OscConfig+0x2fe>
 80011c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 816f 	beq.w	80014bc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011de:	4bd0      	ldr	r3, [pc, #832]	; (8001520 <HAL_RCC_OscConfig+0x650>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00b      	beq.n	8001202 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011ea:	4bcd      	ldr	r3, [pc, #820]	; (8001520 <HAL_RCC_OscConfig+0x650>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d16c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x400>
 80011f6:	4bca      	ldr	r3, [pc, #808]	; (8001520 <HAL_RCC_OscConfig+0x650>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d166      	bne.n	80012d0 <HAL_RCC_OscConfig+0x400>
 8001202:	2302      	movs	r3, #2
 8001204:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001208:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800120c:	fa93 f3a3 	rbit	r3, r3
 8001210:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001214:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001218:	fab3 f383 	clz	r3, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	b2db      	uxtb	r3, r3
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b01      	cmp	r3, #1
 800122a:	d102      	bne.n	8001232 <HAL_RCC_OscConfig+0x362>
 800122c:	4bbc      	ldr	r3, [pc, #752]	; (8001520 <HAL_RCC_OscConfig+0x650>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	e013      	b.n	800125a <HAL_RCC_OscConfig+0x38a>
 8001232:	2302      	movs	r3, #2
 8001234:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001238:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800123c:	fa93 f3a3 	rbit	r3, r3
 8001240:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800124a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800124e:	fa93 f3a3 	rbit	r3, r3
 8001252:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001256:	4bb2      	ldr	r3, [pc, #712]	; (8001520 <HAL_RCC_OscConfig+0x650>)
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	2202      	movs	r2, #2
 800125c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001260:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001264:	fa92 f2a2 	rbit	r2, r2
 8001268:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800126c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001270:	fab2 f282 	clz	r2, r2
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	f042 0220 	orr.w	r2, r2, #32
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	f002 021f 	and.w	r2, r2, #31
 8001280:	2101      	movs	r1, #1
 8001282:	fa01 f202 	lsl.w	r2, r1, r2
 8001286:	4013      	ands	r3, r2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d007      	beq.n	800129c <HAL_RCC_OscConfig+0x3cc>
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d002      	beq.n	800129c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	f000 bd1b 	b.w	8001cd2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129c:	4ba0      	ldr	r3, [pc, #640]	; (8001520 <HAL_RCC_OscConfig+0x650>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	21f8      	movs	r1, #248	; 0xf8
 80012ac:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012b4:	fa91 f1a1 	rbit	r1, r1
 80012b8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80012bc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012c0:	fab1 f181 	clz	r1, r1
 80012c4:	b2c9      	uxtb	r1, r1
 80012c6:	408b      	lsls	r3, r1
 80012c8:	4995      	ldr	r1, [pc, #596]	; (8001520 <HAL_RCC_OscConfig+0x650>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	e0f5      	b.n	80014bc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8085 	beq.w	80013e6 <HAL_RCC_OscConfig+0x516>
 80012dc:	2301      	movs	r3, #1
 80012de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012e6:	fa93 f3a3 	rbit	r3, r3
 80012ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80012ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	461a      	mov	r2, r3
 8001304:	2301      	movs	r3, #1
 8001306:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fb1a 	bl	8000940 <HAL_GetTick>
 800130c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	e00a      	b.n	8001328 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fb15 	bl	8000940 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d902      	bls.n	8001328 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	f000 bcd5 	b.w	8001cd2 <HAL_RCC_OscConfig+0xe02>
 8001328:	2302      	movs	r3, #2
 800132a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001332:	fa93 f3a3 	rbit	r3, r3
 8001336:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800133a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	095b      	lsrs	r3, r3, #5
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b01      	cmp	r3, #1
 8001350:	d102      	bne.n	8001358 <HAL_RCC_OscConfig+0x488>
 8001352:	4b73      	ldr	r3, [pc, #460]	; (8001520 <HAL_RCC_OscConfig+0x650>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	e013      	b.n	8001380 <HAL_RCC_OscConfig+0x4b0>
 8001358:	2302      	movs	r3, #2
 800135a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001362:	fa93 f3a3 	rbit	r3, r3
 8001366:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001370:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001374:	fa93 f3a3 	rbit	r3, r3
 8001378:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800137c:	4b68      	ldr	r3, [pc, #416]	; (8001520 <HAL_RCC_OscConfig+0x650>)
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	2202      	movs	r2, #2
 8001382:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001386:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800138a:	fa92 f2a2 	rbit	r2, r2
 800138e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001392:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001396:	fab2 f282 	clz	r2, r2
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	f042 0220 	orr.w	r2, r2, #32
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	f002 021f 	and.w	r2, r2, #31
 80013a6:	2101      	movs	r1, #1
 80013a8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0af      	beq.n	8001312 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	4b5b      	ldr	r3, [pc, #364]	; (8001520 <HAL_RCC_OscConfig+0x650>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	21f8      	movs	r1, #248	; 0xf8
 80013c2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013ca:	fa91 f1a1 	rbit	r1, r1
 80013ce:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80013d2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80013d6:	fab1 f181 	clz	r1, r1
 80013da:	b2c9      	uxtb	r1, r1
 80013dc:	408b      	lsls	r3, r1
 80013de:	4950      	ldr	r1, [pc, #320]	; (8001520 <HAL_RCC_OscConfig+0x650>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
 80013e4:	e06a      	b.n	80014bc <HAL_RCC_OscConfig+0x5ec>
 80013e6:	2301      	movs	r3, #1
 80013e8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80013f0:	fa93 f3a3 	rbit	r3, r3
 80013f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80013f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fc:	fab3 f383 	clz	r3, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001406:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	461a      	mov	r2, r3
 800140e:	2300      	movs	r3, #0
 8001410:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001412:	f7ff fa95 	bl	8000940 <HAL_GetTick>
 8001416:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141a:	e00a      	b.n	8001432 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141c:	f7ff fa90 	bl	8000940 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d902      	bls.n	8001432 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	f000 bc50 	b.w	8001cd2 <HAL_RCC_OscConfig+0xe02>
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001438:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800143c:	fa93 f3a3 	rbit	r3, r3
 8001440:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001448:	fab3 f383 	clz	r3, r3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b01      	cmp	r3, #1
 800145a:	d102      	bne.n	8001462 <HAL_RCC_OscConfig+0x592>
 800145c:	4b30      	ldr	r3, [pc, #192]	; (8001520 <HAL_RCC_OscConfig+0x650>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	e013      	b.n	800148a <HAL_RCC_OscConfig+0x5ba>
 8001462:	2302      	movs	r3, #2
 8001464:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001474:	2302      	movs	r3, #2
 8001476:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800147a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800147e:	fa93 f3a3 	rbit	r3, r3
 8001482:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <HAL_RCC_OscConfig+0x650>)
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	2202      	movs	r2, #2
 800148c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001490:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001494:	fa92 f2a2 	rbit	r2, r2
 8001498:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800149c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014a0:	fab2 f282 	clz	r2, r2
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	f042 0220 	orr.w	r2, r2, #32
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	f002 021f 	and.w	r2, r2, #31
 80014b0:	2101      	movs	r1, #1
 80014b2:	fa01 f202 	lsl.w	r2, r1, r2
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1af      	bne.n	800141c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 80da 	beq.w	8001680 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d069      	beq.n	80015aa <HAL_RCC_OscConfig+0x6da>
 80014d6:	2301      	movs	r3, #1
 80014d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014e0:	fa93 f3a3 	rbit	r3, r3
 80014e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80014e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ec:	fab3 f383 	clz	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_RCC_OscConfig+0x654>)
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	461a      	mov	r2, r3
 80014fc:	2301      	movs	r3, #1
 80014fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7ff fa1e 	bl	8000940 <HAL_GetTick>
 8001504:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001508:	e00e      	b.n	8001528 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150a:	f7ff fa19 	bl	8000940 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d906      	bls.n	8001528 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e3d9      	b.n	8001cd2 <HAL_RCC_OscConfig+0xe02>
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	10908120 	.word	0x10908120
 8001528:	2302      	movs	r3, #2
 800152a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001532:	fa93 f3a3 	rbit	r3, r3
 8001536:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800153a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800153e:	2202      	movs	r2, #2
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fa93 f2a3 	rbit	r2, r3
 800154c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001556:	2202      	movs	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fa93 f2a3 	rbit	r2, r3
 8001564:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001568:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	4ba5      	ldr	r3, [pc, #660]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 800156c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800156e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001572:	2102      	movs	r1, #2
 8001574:	6019      	str	r1, [r3, #0]
 8001576:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	fa93 f1a3 	rbit	r1, r3
 8001580:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001584:	6019      	str	r1, [r3, #0]
  return result;
 8001586:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	fab3 f383 	clz	r3, r3
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001596:	b2db      	uxtb	r3, r3
 8001598:	f003 031f 	and.w	r3, r3, #31
 800159c:	2101      	movs	r1, #1
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0b0      	beq.n	800150a <HAL_RCC_OscConfig+0x63a>
 80015a8:	e06a      	b.n	8001680 <HAL_RCC_OscConfig+0x7b0>
 80015aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	fa93 f2a3 	rbit	r2, r3
 80015bc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015c0:	601a      	str	r2, [r3, #0]
  return result;
 80015c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015c6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c8:	fab3 f383 	clz	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b8c      	ldr	r3, [pc, #560]	; (8001804 <HAL_RCC_OscConfig+0x934>)
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	461a      	mov	r2, r3
 80015d8:	2300      	movs	r3, #0
 80015da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7ff f9b0 	bl	8000940 <HAL_GetTick>
 80015e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e4:	e009      	b.n	80015fa <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e6:	f7ff f9ab 	bl	8000940 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e36b      	b.n	8001cd2 <HAL_RCC_OscConfig+0xe02>
 80015fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80015fe:	2202      	movs	r2, #2
 8001600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001602:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	fa93 f2a3 	rbit	r2, r3
 800160c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001616:	2202      	movs	r2, #2
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fa93 f2a3 	rbit	r2, r3
 8001624:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800162e:	2202      	movs	r2, #2
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	fa93 f2a3 	rbit	r2, r3
 800163c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001640:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001642:	4b6f      	ldr	r3, [pc, #444]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 8001644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001646:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800164a:	2102      	movs	r1, #2
 800164c:	6019      	str	r1, [r3, #0]
 800164e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	fa93 f1a3 	rbit	r1, r3
 8001658:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800165c:	6019      	str	r1, [r3, #0]
  return result;
 800165e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	fab3 f383 	clz	r3, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f003 031f 	and.w	r3, r3, #31
 8001674:	2101      	movs	r1, #1
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1b2      	bne.n	80015e6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 8158 	beq.w	8001940 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001696:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d112      	bne.n	80016c8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b57      	ldr	r3, [pc, #348]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a56      	ldr	r2, [pc, #344]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b54      	ldr	r3, [pc, #336]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c8:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <HAL_RCC_OscConfig+0x938>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11a      	bne.n	800170a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d4:	4b4c      	ldr	r3, [pc, #304]	; (8001808 <HAL_RCC_OscConfig+0x938>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a4b      	ldr	r2, [pc, #300]	; (8001808 <HAL_RCC_OscConfig+0x938>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016de:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e0:	f7ff f92e 	bl	8000940 <HAL_GetTick>
 80016e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	e009      	b.n	80016fe <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ea:	f7ff f929 	bl	8000940 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e2e9      	b.n	8001cd2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	4b42      	ldr	r3, [pc, #264]	; (8001808 <HAL_RCC_OscConfig+0x938>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0ef      	beq.n	80016ea <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d106      	bne.n	8001722 <HAL_RCC_OscConfig+0x852>
 8001714:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4a39      	ldr	r2, [pc, #228]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6213      	str	r3, [r2, #32]
 8001720:	e02f      	b.n	8001782 <HAL_RCC_OscConfig+0x8b2>
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10c      	bne.n	8001746 <HAL_RCC_OscConfig+0x876>
 800172c:	4b34      	ldr	r3, [pc, #208]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a33      	ldr	r2, [pc, #204]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	6213      	str	r3, [r2, #32]
 8001738:	4b31      	ldr	r3, [pc, #196]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a30      	ldr	r2, [pc, #192]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 800173e:	f023 0304 	bic.w	r3, r3, #4
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	e01d      	b.n	8001782 <HAL_RCC_OscConfig+0x8b2>
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b05      	cmp	r3, #5
 800174e:	d10c      	bne.n	800176a <HAL_RCC_OscConfig+0x89a>
 8001750:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4a2a      	ldr	r2, [pc, #168]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	6213      	str	r3, [r2, #32]
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4a27      	ldr	r2, [pc, #156]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6213      	str	r3, [r2, #32]
 8001768:	e00b      	b.n	8001782 <HAL_RCC_OscConfig+0x8b2>
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4a24      	ldr	r2, [pc, #144]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6213      	str	r3, [r2, #32]
 8001776:	4b22      	ldr	r3, [pc, #136]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4a21      	ldr	r2, [pc, #132]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d06b      	beq.n	8001864 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff f8d8 	bl	8000940 <HAL_GetTick>
 8001790:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001794:	e00b      	b.n	80017ae <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001796:	f7ff f8d3 	bl	8000940 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e291      	b.n	8001cd2 <HAL_RCC_OscConfig+0xe02>
 80017ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80017b2:	2202      	movs	r2, #2
 80017b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	fa93 f2a3 	rbit	r2, r3
 80017c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017ca:	2202      	movs	r2, #2
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa93 f2a3 	rbit	r2, r3
 80017d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017dc:	601a      	str	r2, [r3, #0]
  return result;
 80017de:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d109      	bne.n	800180c <HAL_RCC_OscConfig+0x93c>
 80017f8:	4b01      	ldr	r3, [pc, #4]	; (8001800 <HAL_RCC_OscConfig+0x930>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	e014      	b.n	8001828 <HAL_RCC_OscConfig+0x958>
 80017fe:	bf00      	nop
 8001800:	40021000 	.word	0x40021000
 8001804:	10908120 	.word	0x10908120
 8001808:	40007000 	.word	0x40007000
 800180c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001810:	2202      	movs	r2, #2
 8001812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	fa93 f2a3 	rbit	r2, r3
 800181e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	4bbb      	ldr	r3, [pc, #748]	; (8001b14 <HAL_RCC_OscConfig+0xc44>)
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800182c:	2102      	movs	r1, #2
 800182e:	6011      	str	r1, [r2, #0]
 8001830:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	fa92 f1a2 	rbit	r1, r2
 800183a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800183e:	6011      	str	r1, [r2, #0]
  return result;
 8001840:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	fab2 f282 	clz	r2, r2
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	f002 021f 	and.w	r2, r2, #31
 8001856:	2101      	movs	r1, #1
 8001858:	fa01 f202 	lsl.w	r2, r1, r2
 800185c:	4013      	ands	r3, r2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d099      	beq.n	8001796 <HAL_RCC_OscConfig+0x8c6>
 8001862:	e063      	b.n	800192c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001864:	f7ff f86c 	bl	8000940 <HAL_GetTick>
 8001868:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186c:	e00b      	b.n	8001886 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7ff f867 	bl	8000940 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e225      	b.n	8001cd2 <HAL_RCC_OscConfig+0xe02>
 8001886:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800188a:	2202      	movs	r2, #2
 800188c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	fa93 f2a3 	rbit	r2, r3
 8001898:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018a2:	2202      	movs	r2, #2
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fa93 f2a3 	rbit	r2, r3
 80018b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018b4:	601a      	str	r2, [r3, #0]
  return result;
 80018b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d102      	bne.n	80018d6 <HAL_RCC_OscConfig+0xa06>
 80018d0:	4b90      	ldr	r3, [pc, #576]	; (8001b14 <HAL_RCC_OscConfig+0xc44>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	e00d      	b.n	80018f2 <HAL_RCC_OscConfig+0xa22>
 80018d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018da:	2202      	movs	r2, #2
 80018dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	fa93 f2a3 	rbit	r2, r3
 80018e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	4b89      	ldr	r3, [pc, #548]	; (8001b14 <HAL_RCC_OscConfig+0xc44>)
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018f6:	2102      	movs	r1, #2
 80018f8:	6011      	str	r1, [r2, #0]
 80018fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	fa92 f1a2 	rbit	r1, r2
 8001904:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001908:	6011      	str	r1, [r2, #0]
  return result;
 800190a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	fab2 f282 	clz	r2, r2
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	f002 021f 	and.w	r2, r2, #31
 8001920:	2101      	movs	r1, #1
 8001922:	fa01 f202 	lsl.w	r2, r1, r2
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1a0      	bne.n	800186e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800192c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001934:	4b77      	ldr	r3, [pc, #476]	; (8001b14 <HAL_RCC_OscConfig+0xc44>)
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	4a76      	ldr	r2, [pc, #472]	; (8001b14 <HAL_RCC_OscConfig+0xc44>)
 800193a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 81c2 	beq.w	8001cd0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800194c:	4b71      	ldr	r3, [pc, #452]	; (8001b14 <HAL_RCC_OscConfig+0xc44>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b08      	cmp	r3, #8
 8001956:	f000 819c 	beq.w	8001c92 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	2b02      	cmp	r3, #2
 8001962:	f040 8114 	bne.w	8001b8e <HAL_RCC_OscConfig+0xcbe>
 8001966:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800196a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800196e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	fa93 f2a3 	rbit	r2, r3
 800197a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800197e:	601a      	str	r2, [r3, #0]
  return result;
 8001980:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001984:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001990:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	461a      	mov	r2, r3
 8001998:	2300      	movs	r3, #0
 800199a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7fe ffd0 	bl	8000940 <HAL_GetTick>
 80019a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a4:	e009      	b.n	80019ba <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a6:	f7fe ffcb 	bl	8000940 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e18b      	b.n	8001cd2 <HAL_RCC_OscConfig+0xe02>
 80019ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	fa93 f2a3 	rbit	r2, r3
 80019ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019d2:	601a      	str	r2, [r3, #0]
  return result;
 80019d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	095b      	lsrs	r3, r3, #5
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d102      	bne.n	80019f4 <HAL_RCC_OscConfig+0xb24>
 80019ee:	4b49      	ldr	r3, [pc, #292]	; (8001b14 <HAL_RCC_OscConfig+0xc44>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	e01b      	b.n	8001a2c <HAL_RCC_OscConfig+0xb5c>
 80019f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	fa93 f2a3 	rbit	r2, r3
 8001a08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	fa93 f2a3 	rbit	r2, r3
 8001a22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <HAL_RCC_OscConfig+0xc44>)
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a34:	6011      	str	r1, [r2, #0]
 8001a36:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	fa92 f1a2 	rbit	r1, r2
 8001a40:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a44:	6011      	str	r1, [r2, #0]
  return result;
 8001a46:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	fab2 f282 	clz	r2, r2
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	f042 0220 	orr.w	r2, r2, #32
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	f002 021f 	and.w	r2, r2, #31
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d19e      	bne.n	80019a6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a68:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <HAL_RCC_OscConfig+0xc44>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	4925      	ldr	r1, [pc, #148]	; (8001b14 <HAL_RCC_OscConfig+0xc44>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
 8001a84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	fa93 f2a3 	rbit	r2, r3
 8001a98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a9c:	601a      	str	r2, [r3, #0]
  return result;
 8001a9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aa2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa4:	fab3 f383 	clz	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7fe ff41 	bl	8000940 <HAL_GetTick>
 8001abe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac2:	e009      	b.n	8001ad8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7fe ff3c 	bl	8000940 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0fc      	b.n	8001cd2 <HAL_RCC_OscConfig+0xe02>
 8001ad8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001adc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	fa93 f2a3 	rbit	r2, r3
 8001aec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001af0:	601a      	str	r2, [r3, #0]
  return result;
 8001af2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001af6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d105      	bne.n	8001b18 <HAL_RCC_OscConfig+0xc48>
 8001b0c:	4b01      	ldr	r3, [pc, #4]	; (8001b14 <HAL_RCC_OscConfig+0xc44>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	e01e      	b.n	8001b50 <HAL_RCC_OscConfig+0xc80>
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000
 8001b18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fa93 f2a3 	rbit	r2, r3
 8001b2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	fa93 f2a3 	rbit	r2, r3
 8001b46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	4b63      	ldr	r3, [pc, #396]	; (8001cdc <HAL_RCC_OscConfig+0xe0c>)
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b58:	6011      	str	r1, [r2, #0]
 8001b5a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	fa92 f1a2 	rbit	r1, r2
 8001b64:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b68:	6011      	str	r1, [r2, #0]
  return result;
 8001b6a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	fab2 f282 	clz	r2, r2
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	f042 0220 	orr.w	r2, r2, #32
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f002 021f 	and.w	r2, r2, #31
 8001b80:	2101      	movs	r1, #1
 8001b82:	fa01 f202 	lsl.w	r2, r1, r2
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d09b      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xbf4>
 8001b8c:	e0a0      	b.n	8001cd0 <HAL_RCC_OscConfig+0xe00>
 8001b8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	fa93 f2a3 	rbit	r2, r3
 8001ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba6:	601a      	str	r2, [r3, #0]
  return result;
 8001ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7fe febc 	bl	8000940 <HAL_GetTick>
 8001bc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bcc:	e009      	b.n	8001be2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bce:	f7fe feb7 	bl	8000940 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e077      	b.n	8001cd2 <HAL_RCC_OscConfig+0xe02>
 8001be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f2a3 	rbit	r2, r3
 8001bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfa:	601a      	str	r2, [r3, #0]
  return result;
 8001bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	095b      	lsrs	r3, r3, #5
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d102      	bne.n	8001c1c <HAL_RCC_OscConfig+0xd4c>
 8001c16:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <HAL_RCC_OscConfig+0xe0c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	e01b      	b.n	8001c54 <HAL_RCC_OscConfig+0xd84>
 8001c1c:	f107 0320 	add.w	r3, r7, #32
 8001c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f107 0320 	add.w	r3, r7, #32
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	fa93 f2a3 	rbit	r2, r3
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	f107 0318 	add.w	r3, r7, #24
 8001c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	f107 0318 	add.w	r3, r7, #24
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_RCC_OscConfig+0xe0c>)
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	f107 0210 	add.w	r2, r7, #16
 8001c58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c5c:	6011      	str	r1, [r2, #0]
 8001c5e:	f107 0210 	add.w	r2, r7, #16
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	fa92 f1a2 	rbit	r1, r2
 8001c68:	f107 020c 	add.w	r2, r7, #12
 8001c6c:	6011      	str	r1, [r2, #0]
  return result;
 8001c6e:	f107 020c 	add.w	r2, r7, #12
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	fab2 f282 	clz	r2, r2
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	f042 0220 	orr.w	r2, r2, #32
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f002 021f 	and.w	r2, r2, #31
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d19e      	bne.n	8001bce <HAL_RCC_OscConfig+0xcfe>
 8001c90:	e01e      	b.n	8001cd0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e018      	b.n	8001cd2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_RCC_OscConfig+0xe0c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ca8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d108      	bne.n	8001ccc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001cba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b09e      	sub	sp, #120	; 0x78
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e162      	b.n	8001fbe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b90      	ldr	r3, [pc, #576]	; (8001f3c <HAL_RCC_ClockConfig+0x25c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d910      	bls.n	8001d28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4b8d      	ldr	r3, [pc, #564]	; (8001f3c <HAL_RCC_ClockConfig+0x25c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 0207 	bic.w	r2, r3, #7
 8001d0e:	498b      	ldr	r1, [pc, #556]	; (8001f3c <HAL_RCC_ClockConfig+0x25c>)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	4b89      	ldr	r3, [pc, #548]	; (8001f3c <HAL_RCC_ClockConfig+0x25c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e14a      	b.n	8001fbe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d34:	4b82      	ldr	r3, [pc, #520]	; (8001f40 <HAL_RCC_ClockConfig+0x260>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	497f      	ldr	r1, [pc, #508]	; (8001f40 <HAL_RCC_ClockConfig+0x260>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 80dc 	beq.w	8001f0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d13c      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xf6>
 8001d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d60:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d64:	fa93 f3a3 	rbit	r3, r3
 8001d68:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d102      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xa6>
 8001d80:	4b6f      	ldr	r3, [pc, #444]	; (8001f40 <HAL_RCC_ClockConfig+0x260>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	e00f      	b.n	8001da6 <HAL_RCC_ClockConfig+0xc6>
 8001d86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	667b      	str	r3, [r7, #100]	; 0x64
 8001d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d98:	663b      	str	r3, [r7, #96]	; 0x60
 8001d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001da2:	4b67      	ldr	r3, [pc, #412]	; (8001f40 <HAL_RCC_ClockConfig+0x260>)
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001daa:	65ba      	str	r2, [r7, #88]	; 0x58
 8001dac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dae:	fa92 f2a2 	rbit	r2, r2
 8001db2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001db4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001db6:	fab2 f282 	clz	r2, r2
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	f042 0220 	orr.w	r2, r2, #32
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	f002 021f 	and.w	r2, r2, #31
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d17b      	bne.n	8001eca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0f3      	b.n	8001fbe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d13c      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x178>
 8001dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001de2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d102      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x128>
 8001e02:	4b4f      	ldr	r3, [pc, #316]	; (8001f40 <HAL_RCC_ClockConfig+0x260>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	e00f      	b.n	8001e28 <HAL_RCC_ClockConfig+0x148>
 8001e08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	647b      	str	r3, [r7, #68]	; 0x44
 8001e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e24:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <HAL_RCC_ClockConfig+0x260>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e2c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e30:	fa92 f2a2 	rbit	r2, r2
 8001e34:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e38:	fab2 f282 	clz	r2, r2
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	f042 0220 	orr.w	r2, r2, #32
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	f002 021f 	and.w	r2, r2, #31
 8001e48:	2101      	movs	r1, #1
 8001e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d13a      	bne.n	8001eca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0b2      	b.n	8001fbe <HAL_RCC_ClockConfig+0x2de>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	095b      	lsrs	r3, r3, #5
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d102      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x1a0>
 8001e7a:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_RCC_ClockConfig+0x260>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	e00d      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1bc>
 8001e80:	2302      	movs	r3, #2
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	623b      	str	r3, [r7, #32]
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <HAL_RCC_ClockConfig+0x260>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	61ba      	str	r2, [r7, #24]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	fa92 f2a2 	rbit	r2, r2
 8001ea6:	617a      	str	r2, [r7, #20]
  return result;
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	fab2 f282 	clz	r2, r2
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	f042 0220 	orr.w	r2, r2, #32
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	f002 021f 	and.w	r2, r2, #31
 8001eba:	2101      	movs	r1, #1
 8001ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e079      	b.n	8001fbe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_RCC_ClockConfig+0x260>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f023 0203 	bic.w	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	491a      	ldr	r1, [pc, #104]	; (8001f40 <HAL_RCC_ClockConfig+0x260>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001edc:	f7fe fd30 	bl	8000940 <HAL_GetTick>
 8001ee0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee4:	f7fe fd2c 	bl	8000940 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e061      	b.n	8001fbe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_RCC_ClockConfig+0x260>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 020c 	and.w	r2, r3, #12
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d1eb      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCC_ClockConfig+0x25c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d214      	bcs.n	8001f44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_RCC_ClockConfig+0x25c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	4906      	ldr	r1, [pc, #24]	; (8001f3c <HAL_RCC_ClockConfig+0x25c>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <HAL_RCC_ClockConfig+0x25c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e040      	b.n	8001fbe <HAL_RCC_ClockConfig+0x2de>
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	491a      	ldr	r1, [pc, #104]	; (8001fc8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d009      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4912      	ldr	r1, [pc, #72]	; (8001fc8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f82:	f000 f829 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8001f86:	4601      	mov	r1, r0
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f90:	22f0      	movs	r2, #240	; 0xf0
 8001f92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	fa92 f2a2 	rbit	r2, r2
 8001f9a:	60fa      	str	r2, [r7, #12]
  return result;
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	fab2 f282 	clz	r2, r2
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	40d3      	lsrs	r3, r2
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_RCC_ClockConfig+0x2ec>)
 8001fa8:	5cd3      	ldrb	r3, [r2, r3]
 8001faa:	fa21 f303 	lsr.w	r3, r1, r3
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <HAL_RCC_ClockConfig+0x2f0>)
 8001fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_RCC_ClockConfig+0x2f4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fc7e 	bl	80008b8 <HAL_InitTick>
  
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3778      	adds	r7, #120	; 0x78
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	08002f34 	.word	0x08002f34
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000004 	.word	0x20000004

08001fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d002      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0x30>
 8002002:	2b08      	cmp	r3, #8
 8002004:	d003      	beq.n	800200e <HAL_RCC_GetSysClockFreq+0x36>
 8002006:	e026      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_GetSysClockFreq+0x98>)
 800200a:	613b      	str	r3, [r7, #16]
      break;
 800200c:	e026      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	0c9b      	lsrs	r3, r3, #18
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	4a17      	ldr	r2, [pc, #92]	; (8002074 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002018:	5cd3      	ldrb	r3, [r2, r3]
 800201a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <HAL_RCC_GetSysClockFreq+0x94>)
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	4a14      	ldr	r2, [pc, #80]	; (8002078 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002026:	5cd3      	ldrb	r3, [r2, r3]
 8002028:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002034:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <HAL_RCC_GetSysClockFreq+0x98>)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	fbb2 f2f3 	udiv	r2, r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	e004      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a0c      	ldr	r2, [pc, #48]	; (800207c <HAL_RCC_GetSysClockFreq+0xa4>)
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	613b      	str	r3, [r7, #16]
      break;
 8002054:	e002      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_RCC_GetSysClockFreq+0x98>)
 8002058:	613b      	str	r3, [r7, #16]
      break;
 800205a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800205c:	693b      	ldr	r3, [r7, #16]
}
 800205e:	4618      	mov	r0, r3
 8002060:	371c      	adds	r7, #28
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	007a1200 	.word	0x007a1200
 8002074:	08002f44 	.word	0x08002f44
 8002078:	08002f54 	.word	0x08002f54
 800207c:	003d0900 	.word	0x003d0900

08002080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e049      	b.n	8002126 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fb72 	bl	8000790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3304      	adds	r3, #4
 80020bc:	4619      	mov	r1, r3
 80020be:	4610      	mov	r0, r2
 80020c0:	f000 fa74 	bl	80025ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e049      	b.n	80021d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d106      	bne.n	800215a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f841 	bl	80021dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3304      	adds	r3, #4
 800216a:	4619      	mov	r1, r3
 800216c:	4610      	mov	r0, r2
 800216e:	f000 fa1d 	bl	80025ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800220a:	2302      	movs	r3, #2
 800220c:	e0ff      	b.n	800240e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b14      	cmp	r3, #20
 800221a:	f200 80f0 	bhi.w	80023fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800221e:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002224:	08002279 	.word	0x08002279
 8002228:	080023ff 	.word	0x080023ff
 800222c:	080023ff 	.word	0x080023ff
 8002230:	080023ff 	.word	0x080023ff
 8002234:	080022b9 	.word	0x080022b9
 8002238:	080023ff 	.word	0x080023ff
 800223c:	080023ff 	.word	0x080023ff
 8002240:	080023ff 	.word	0x080023ff
 8002244:	080022fb 	.word	0x080022fb
 8002248:	080023ff 	.word	0x080023ff
 800224c:	080023ff 	.word	0x080023ff
 8002250:	080023ff 	.word	0x080023ff
 8002254:	0800233b 	.word	0x0800233b
 8002258:	080023ff 	.word	0x080023ff
 800225c:	080023ff 	.word	0x080023ff
 8002260:	080023ff 	.word	0x080023ff
 8002264:	0800237d 	.word	0x0800237d
 8002268:	080023ff 	.word	0x080023ff
 800226c:	080023ff 	.word	0x080023ff
 8002270:	080023ff 	.word	0x080023ff
 8002274:	080023bd 	.word	0x080023bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fa30 	bl	80026e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0208 	orr.w	r2, r2, #8
 8002292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0204 	bic.w	r2, r2, #4
 80022a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6999      	ldr	r1, [r3, #24]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	619a      	str	r2, [r3, #24]
      break;
 80022b6:	e0a5      	b.n	8002404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 faa0 	bl	8002804 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699a      	ldr	r2, [r3, #24]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6999      	ldr	r1, [r3, #24]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	021a      	lsls	r2, r3, #8
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	619a      	str	r2, [r3, #24]
      break;
 80022f8:	e084      	b.n	8002404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fb09 	bl	8002918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	69da      	ldr	r2, [r3, #28]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0208 	orr.w	r2, r2, #8
 8002314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69da      	ldr	r2, [r3, #28]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0204 	bic.w	r2, r2, #4
 8002324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69d9      	ldr	r1, [r3, #28]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	61da      	str	r2, [r3, #28]
      break;
 8002338:	e064      	b.n	8002404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fb71 	bl	8002a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	69da      	ldr	r2, [r3, #28]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69da      	ldr	r2, [r3, #28]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69d9      	ldr	r1, [r3, #28]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	021a      	lsls	r2, r3, #8
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	61da      	str	r2, [r3, #28]
      break;
 800237a:	e043      	b.n	8002404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fbba 	bl	8002afc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0208 	orr.w	r2, r2, #8
 8002396:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0204 	bic.w	r2, r2, #4
 80023a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80023ba:	e023      	b.n	8002404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fbfe 	bl	8002bc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	021a      	lsls	r2, r3, #8
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80023fc:	e002      	b.n	8002404 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	75fb      	strb	r3, [r7, #23]
      break;
 8002402:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800240c:	7dfb      	ldrb	r3, [r7, #23]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop

08002418 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_TIM_ConfigClockSource+0x1c>
 8002430:	2302      	movs	r3, #2
 8002432:	e0b6      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x18a>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002452:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800245e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002470:	d03e      	beq.n	80024f0 <HAL_TIM_ConfigClockSource+0xd8>
 8002472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002476:	f200 8087 	bhi.w	8002588 <HAL_TIM_ConfigClockSource+0x170>
 800247a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247e:	f000 8086 	beq.w	800258e <HAL_TIM_ConfigClockSource+0x176>
 8002482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002486:	d87f      	bhi.n	8002588 <HAL_TIM_ConfigClockSource+0x170>
 8002488:	2b70      	cmp	r3, #112	; 0x70
 800248a:	d01a      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0xaa>
 800248c:	2b70      	cmp	r3, #112	; 0x70
 800248e:	d87b      	bhi.n	8002588 <HAL_TIM_ConfigClockSource+0x170>
 8002490:	2b60      	cmp	r3, #96	; 0x60
 8002492:	d050      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x11e>
 8002494:	2b60      	cmp	r3, #96	; 0x60
 8002496:	d877      	bhi.n	8002588 <HAL_TIM_ConfigClockSource+0x170>
 8002498:	2b50      	cmp	r3, #80	; 0x50
 800249a:	d03c      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0xfe>
 800249c:	2b50      	cmp	r3, #80	; 0x50
 800249e:	d873      	bhi.n	8002588 <HAL_TIM_ConfigClockSource+0x170>
 80024a0:	2b40      	cmp	r3, #64	; 0x40
 80024a2:	d058      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0x13e>
 80024a4:	2b40      	cmp	r3, #64	; 0x40
 80024a6:	d86f      	bhi.n	8002588 <HAL_TIM_ConfigClockSource+0x170>
 80024a8:	2b30      	cmp	r3, #48	; 0x30
 80024aa:	d064      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0x15e>
 80024ac:	2b30      	cmp	r3, #48	; 0x30
 80024ae:	d86b      	bhi.n	8002588 <HAL_TIM_ConfigClockSource+0x170>
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	d060      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0x15e>
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d867      	bhi.n	8002588 <HAL_TIM_ConfigClockSource+0x170>
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d05c      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0x15e>
 80024bc:	2b10      	cmp	r3, #16
 80024be:	d05a      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0x15e>
 80024c0:	e062      	b.n	8002588 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	6899      	ldr	r1, [r3, #8]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f000 fc57 	bl	8002d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	609a      	str	r2, [r3, #8]
      break;
 80024ee:	e04f      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	6899      	ldr	r1, [r3, #8]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f000 fc40 	bl	8002d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002512:	609a      	str	r2, [r3, #8]
      break;
 8002514:	e03c      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6859      	ldr	r1, [r3, #4]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	461a      	mov	r2, r3
 8002524:	f000 fbb4 	bl	8002c90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2150      	movs	r1, #80	; 0x50
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fc0d 	bl	8002d4e <TIM_ITRx_SetConfig>
      break;
 8002534:	e02c      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6859      	ldr	r1, [r3, #4]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	461a      	mov	r2, r3
 8002544:	f000 fbd3 	bl	8002cee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2160      	movs	r1, #96	; 0x60
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fbfd 	bl	8002d4e <TIM_ITRx_SetConfig>
      break;
 8002554:	e01c      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6859      	ldr	r1, [r3, #4]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	461a      	mov	r2, r3
 8002564:	f000 fb94 	bl	8002c90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2140      	movs	r1, #64	; 0x40
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fbed 	bl	8002d4e <TIM_ITRx_SetConfig>
      break;
 8002574:	e00c      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4619      	mov	r1, r3
 8002580:	4610      	mov	r0, r2
 8002582:	f000 fbe4 	bl	8002d4e <TIM_ITRx_SetConfig>
      break;
 8002586:	e003      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
      break;
 800258c:	e000      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800258e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a42      	ldr	r2, [pc, #264]	; (80026c8 <TIM_Base_SetConfig+0x11c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00f      	beq.n	80025e4 <TIM_Base_SetConfig+0x38>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ca:	d00b      	beq.n	80025e4 <TIM_Base_SetConfig+0x38>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a3f      	ldr	r2, [pc, #252]	; (80026cc <TIM_Base_SetConfig+0x120>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d007      	beq.n	80025e4 <TIM_Base_SetConfig+0x38>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3e      	ldr	r2, [pc, #248]	; (80026d0 <TIM_Base_SetConfig+0x124>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d003      	beq.n	80025e4 <TIM_Base_SetConfig+0x38>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3d      	ldr	r2, [pc, #244]	; (80026d4 <TIM_Base_SetConfig+0x128>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d108      	bne.n	80025f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a33      	ldr	r2, [pc, #204]	; (80026c8 <TIM_Base_SetConfig+0x11c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01b      	beq.n	8002636 <TIM_Base_SetConfig+0x8a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002604:	d017      	beq.n	8002636 <TIM_Base_SetConfig+0x8a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a30      	ldr	r2, [pc, #192]	; (80026cc <TIM_Base_SetConfig+0x120>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <TIM_Base_SetConfig+0x8a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a2f      	ldr	r2, [pc, #188]	; (80026d0 <TIM_Base_SetConfig+0x124>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00f      	beq.n	8002636 <TIM_Base_SetConfig+0x8a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a2e      	ldr	r2, [pc, #184]	; (80026d4 <TIM_Base_SetConfig+0x128>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00b      	beq.n	8002636 <TIM_Base_SetConfig+0x8a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a2d      	ldr	r2, [pc, #180]	; (80026d8 <TIM_Base_SetConfig+0x12c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <TIM_Base_SetConfig+0x8a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a2c      	ldr	r2, [pc, #176]	; (80026dc <TIM_Base_SetConfig+0x130>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <TIM_Base_SetConfig+0x8a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a2b      	ldr	r2, [pc, #172]	; (80026e0 <TIM_Base_SetConfig+0x134>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a16      	ldr	r2, [pc, #88]	; (80026c8 <TIM_Base_SetConfig+0x11c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00f      	beq.n	8002694 <TIM_Base_SetConfig+0xe8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a17      	ldr	r2, [pc, #92]	; (80026d4 <TIM_Base_SetConfig+0x128>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00b      	beq.n	8002694 <TIM_Base_SetConfig+0xe8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a16      	ldr	r2, [pc, #88]	; (80026d8 <TIM_Base_SetConfig+0x12c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d007      	beq.n	8002694 <TIM_Base_SetConfig+0xe8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a15      	ldr	r2, [pc, #84]	; (80026dc <TIM_Base_SetConfig+0x130>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d003      	beq.n	8002694 <TIM_Base_SetConfig+0xe8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <TIM_Base_SetConfig+0x134>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d103      	bne.n	800269c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d105      	bne.n	80026ba <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f023 0201 	bic.w	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	611a      	str	r2, [r3, #16]
  }
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40012c00 	.word	0x40012c00
 80026cc:	40000400 	.word	0x40000400
 80026d0:	40000800 	.word	0x40000800
 80026d4:	40013400 	.word	0x40013400
 80026d8:	40014000 	.word	0x40014000
 80026dc:	40014400 	.word	0x40014400
 80026e0:	40014800 	.word	0x40014800

080026e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f023 0201 	bic.w	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f023 0302 	bic.w	r3, r3, #2
 8002730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a2c      	ldr	r2, [pc, #176]	; (80027f0 <TIM_OC1_SetConfig+0x10c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00f      	beq.n	8002764 <TIM_OC1_SetConfig+0x80>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a2b      	ldr	r2, [pc, #172]	; (80027f4 <TIM_OC1_SetConfig+0x110>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00b      	beq.n	8002764 <TIM_OC1_SetConfig+0x80>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a2a      	ldr	r2, [pc, #168]	; (80027f8 <TIM_OC1_SetConfig+0x114>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d007      	beq.n	8002764 <TIM_OC1_SetConfig+0x80>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a29      	ldr	r2, [pc, #164]	; (80027fc <TIM_OC1_SetConfig+0x118>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d003      	beq.n	8002764 <TIM_OC1_SetConfig+0x80>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a28      	ldr	r2, [pc, #160]	; (8002800 <TIM_OC1_SetConfig+0x11c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d10c      	bne.n	800277e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 0308 	bic.w	r3, r3, #8
 800276a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <TIM_OC1_SetConfig+0x10c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00f      	beq.n	80027a6 <TIM_OC1_SetConfig+0xc2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a1a      	ldr	r2, [pc, #104]	; (80027f4 <TIM_OC1_SetConfig+0x110>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00b      	beq.n	80027a6 <TIM_OC1_SetConfig+0xc2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a19      	ldr	r2, [pc, #100]	; (80027f8 <TIM_OC1_SetConfig+0x114>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d007      	beq.n	80027a6 <TIM_OC1_SetConfig+0xc2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a18      	ldr	r2, [pc, #96]	; (80027fc <TIM_OC1_SetConfig+0x118>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d003      	beq.n	80027a6 <TIM_OC1_SetConfig+0xc2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a17      	ldr	r2, [pc, #92]	; (8002800 <TIM_OC1_SetConfig+0x11c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d111      	bne.n	80027ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	621a      	str	r2, [r3, #32]
}
 80027e4:	bf00      	nop
 80027e6:	371c      	adds	r7, #28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	40012c00 	.word	0x40012c00
 80027f4:	40013400 	.word	0x40013400
 80027f8:	40014000 	.word	0x40014000
 80027fc:	40014400 	.word	0x40014400
 8002800:	40014800 	.word	0x40014800

08002804 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f023 0210 	bic.w	r2, r3, #16
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800283e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f023 0320 	bic.w	r3, r3, #32
 8002852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a28      	ldr	r2, [pc, #160]	; (8002904 <TIM_OC2_SetConfig+0x100>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d003      	beq.n	8002870 <TIM_OC2_SetConfig+0x6c>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a27      	ldr	r2, [pc, #156]	; (8002908 <TIM_OC2_SetConfig+0x104>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d10d      	bne.n	800288c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800288a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <TIM_OC2_SetConfig+0x100>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00f      	beq.n	80028b4 <TIM_OC2_SetConfig+0xb0>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <TIM_OC2_SetConfig+0x104>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00b      	beq.n	80028b4 <TIM_OC2_SetConfig+0xb0>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a1b      	ldr	r2, [pc, #108]	; (800290c <TIM_OC2_SetConfig+0x108>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d007      	beq.n	80028b4 <TIM_OC2_SetConfig+0xb0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a1a      	ldr	r2, [pc, #104]	; (8002910 <TIM_OC2_SetConfig+0x10c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d003      	beq.n	80028b4 <TIM_OC2_SetConfig+0xb0>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a19      	ldr	r2, [pc, #100]	; (8002914 <TIM_OC2_SetConfig+0x110>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d113      	bne.n	80028dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028ba:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028c2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	621a      	str	r2, [r3, #32]
}
 80028f6:	bf00      	nop
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40012c00 	.word	0x40012c00
 8002908:	40013400 	.word	0x40013400
 800290c:	40014000 	.word	0x40014000
 8002910:	40014400 	.word	0x40014400
 8002914:	40014800 	.word	0x40014800

08002918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0303 	bic.w	r3, r3, #3
 8002952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a27      	ldr	r2, [pc, #156]	; (8002a14 <TIM_OC3_SetConfig+0xfc>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d003      	beq.n	8002982 <TIM_OC3_SetConfig+0x6a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <TIM_OC3_SetConfig+0x100>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d10d      	bne.n	800299e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800299c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1c      	ldr	r2, [pc, #112]	; (8002a14 <TIM_OC3_SetConfig+0xfc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00f      	beq.n	80029c6 <TIM_OC3_SetConfig+0xae>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1b      	ldr	r2, [pc, #108]	; (8002a18 <TIM_OC3_SetConfig+0x100>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00b      	beq.n	80029c6 <TIM_OC3_SetConfig+0xae>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a1a      	ldr	r2, [pc, #104]	; (8002a1c <TIM_OC3_SetConfig+0x104>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <TIM_OC3_SetConfig+0xae>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <TIM_OC3_SetConfig+0x108>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d003      	beq.n	80029c6 <TIM_OC3_SetConfig+0xae>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <TIM_OC3_SetConfig+0x10c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d113      	bne.n	80029ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	621a      	str	r2, [r3, #32]
}
 8002a08:	bf00      	nop
 8002a0a:	371c      	adds	r7, #28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40013400 	.word	0x40013400
 8002a1c:	40014000 	.word	0x40014000
 8002a20:	40014400 	.word	0x40014400
 8002a24:	40014800 	.word	0x40014800

08002a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	031b      	lsls	r3, r3, #12
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <TIM_OC4_SetConfig+0xc0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00f      	beq.n	8002aac <TIM_OC4_SetConfig+0x84>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <TIM_OC4_SetConfig+0xc4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00b      	beq.n	8002aac <TIM_OC4_SetConfig+0x84>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <TIM_OC4_SetConfig+0xc8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d007      	beq.n	8002aac <TIM_OC4_SetConfig+0x84>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <TIM_OC4_SetConfig+0xcc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d003      	beq.n	8002aac <TIM_OC4_SetConfig+0x84>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <TIM_OC4_SetConfig+0xd0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d109      	bne.n	8002ac0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ab2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	019b      	lsls	r3, r3, #6
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	621a      	str	r2, [r3, #32]
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40013400 	.word	0x40013400
 8002af0:	40014000 	.word	0x40014000
 8002af4:	40014400 	.word	0x40014400
 8002af8:	40014800 	.word	0x40014800

08002afc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002b40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	041b      	lsls	r3, r3, #16
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <TIM_OC5_SetConfig+0xb4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00f      	beq.n	8002b76 <TIM_OC5_SetConfig+0x7a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a16      	ldr	r2, [pc, #88]	; (8002bb4 <TIM_OC5_SetConfig+0xb8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00b      	beq.n	8002b76 <TIM_OC5_SetConfig+0x7a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a15      	ldr	r2, [pc, #84]	; (8002bb8 <TIM_OC5_SetConfig+0xbc>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d007      	beq.n	8002b76 <TIM_OC5_SetConfig+0x7a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <TIM_OC5_SetConfig+0xc0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d003      	beq.n	8002b76 <TIM_OC5_SetConfig+0x7a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <TIM_OC5_SetConfig+0xc4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d109      	bne.n	8002b8a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	621a      	str	r2, [r3, #32]
}
 8002ba4:	bf00      	nop
 8002ba6:	371c      	adds	r7, #28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40013400 	.word	0x40013400
 8002bb8:	40014000 	.word	0x40014000
 8002bbc:	40014400 	.word	0x40014400
 8002bc0:	40014800 	.word	0x40014800

08002bc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	051b      	lsls	r3, r3, #20
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a18      	ldr	r2, [pc, #96]	; (8002c7c <TIM_OC6_SetConfig+0xb8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00f      	beq.n	8002c40 <TIM_OC6_SetConfig+0x7c>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <TIM_OC6_SetConfig+0xbc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00b      	beq.n	8002c40 <TIM_OC6_SetConfig+0x7c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a16      	ldr	r2, [pc, #88]	; (8002c84 <TIM_OC6_SetConfig+0xc0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d007      	beq.n	8002c40 <TIM_OC6_SetConfig+0x7c>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a15      	ldr	r2, [pc, #84]	; (8002c88 <TIM_OC6_SetConfig+0xc4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d003      	beq.n	8002c40 <TIM_OC6_SetConfig+0x7c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a14      	ldr	r2, [pc, #80]	; (8002c8c <TIM_OC6_SetConfig+0xc8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d109      	bne.n	8002c54 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	029b      	lsls	r3, r3, #10
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	621a      	str	r2, [r3, #32]
}
 8002c6e:	bf00      	nop
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40012c00 	.word	0x40012c00
 8002c80:	40013400 	.word	0x40013400
 8002c84:	40014000 	.word	0x40014000
 8002c88:	40014400 	.word	0x40014400
 8002c8c:	40014800 	.word	0x40014800

08002c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f023 0201 	bic.w	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f023 030a 	bic.w	r3, r3, #10
 8002ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	621a      	str	r2, [r3, #32]
}
 8002ce2:	bf00      	nop
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b087      	sub	sp, #28
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f023 0210 	bic.w	r2, r3, #16
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	031b      	lsls	r3, r3, #12
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	621a      	str	r2, [r3, #32]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f043 0307 	orr.w	r3, r3, #7
 8002d70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	609a      	str	r2, [r3, #8]
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	021a      	lsls	r2, r3, #8
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	609a      	str	r2, [r3, #8]
}
 8002db8:	bf00      	nop
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e063      	b.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a2b      	ldr	r2, [pc, #172]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d004      	beq.n	8002e10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d108      	bne.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1b      	ldr	r2, [pc, #108]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d018      	beq.n	8002e78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4e:	d013      	beq.n	8002e78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00e      	beq.n	8002e78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d009      	beq.n	8002e78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d004      	beq.n	8002e78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d10c      	bne.n	8002e92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40012c00 	.word	0x40012c00
 8002eb4:	40013400 	.word	0x40013400
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40000800 	.word	0x40000800
 8002ec0:	40014000 	.word	0x40014000

08002ec4 <__libc_init_array>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	4d0d      	ldr	r5, [pc, #52]	; (8002efc <__libc_init_array+0x38>)
 8002ec8:	4c0d      	ldr	r4, [pc, #52]	; (8002f00 <__libc_init_array+0x3c>)
 8002eca:	1b64      	subs	r4, r4, r5
 8002ecc:	10a4      	asrs	r4, r4, #2
 8002ece:	2600      	movs	r6, #0
 8002ed0:	42a6      	cmp	r6, r4
 8002ed2:	d109      	bne.n	8002ee8 <__libc_init_array+0x24>
 8002ed4:	4d0b      	ldr	r5, [pc, #44]	; (8002f04 <__libc_init_array+0x40>)
 8002ed6:	4c0c      	ldr	r4, [pc, #48]	; (8002f08 <__libc_init_array+0x44>)
 8002ed8:	f000 f820 	bl	8002f1c <_init>
 8002edc:	1b64      	subs	r4, r4, r5
 8002ede:	10a4      	asrs	r4, r4, #2
 8002ee0:	2600      	movs	r6, #0
 8002ee2:	42a6      	cmp	r6, r4
 8002ee4:	d105      	bne.n	8002ef2 <__libc_init_array+0x2e>
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}
 8002ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eec:	4798      	blx	r3
 8002eee:	3601      	adds	r6, #1
 8002ef0:	e7ee      	b.n	8002ed0 <__libc_init_array+0xc>
 8002ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef6:	4798      	blx	r3
 8002ef8:	3601      	adds	r6, #1
 8002efa:	e7f2      	b.n	8002ee2 <__libc_init_array+0x1e>
 8002efc:	08002f64 	.word	0x08002f64
 8002f00:	08002f64 	.word	0x08002f64
 8002f04:	08002f64 	.word	0x08002f64
 8002f08:	08002f68 	.word	0x08002f68

08002f0c <memset>:
 8002f0c:	4402      	add	r2, r0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d100      	bne.n	8002f16 <memset+0xa>
 8002f14:	4770      	bx	lr
 8002f16:	f803 1b01 	strb.w	r1, [r3], #1
 8002f1a:	e7f9      	b.n	8002f10 <memset+0x4>

08002f1c <_init>:
 8002f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1e:	bf00      	nop
 8002f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f22:	bc08      	pop	{r3}
 8002f24:	469e      	mov	lr, r3
 8002f26:	4770      	bx	lr

08002f28 <_fini>:
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	bf00      	nop
 8002f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2e:	bc08      	pop	{r3}
 8002f30:	469e      	mov	lr, r3
 8002f32:	4770      	bx	lr
